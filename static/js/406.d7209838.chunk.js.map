{"version":3,"file":"static/js/406.d7209838.chunk.js","mappings":"0NAYA,MAJA,SAAeA,GAA6C,IAA1CC,EAAMD,EAANC,OAAQC,EAAQF,EAARE,SACxB,OAAOC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAAGC,EAAAA,EAAAA,IAAmBL,EAAQC,IACvC,E,uCCTA,EAAyB,yBAAzB,EAA0D,wBAA1D,EAA0F,wBAA1F,EAA2H,yBC+C3H,MArCA,WACE,IAAMK,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAiBC,EAAAA,IAKzBC,GAAiBC,EAAAA,EAAAA,cAAY,WACjCN,EAASO,EAAAA,EAAMC,KACjB,GAAG,CAACR,IAEJ,OACEJ,EAAAA,EAAAA,KAACa,EAAAA,EAAiB,CAChBC,YACER,GACES,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcf,SAAA,EAC5BF,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,QAASC,EAAAA,EAAQC,SAAUL,UAAWC,EAAaf,SAAC,kBAGhEa,EAAAA,EAAAA,MAACG,EAAAA,EAAU,CAACC,QAASC,EAAAA,EAAQE,MAAON,UAAWC,EAAaf,SAAA,EAC1DF,EAAAA,EAAAA,KAACuB,EAAM,CAACzB,OAAQQ,EAAMR,OAAQC,SAAUO,EAAMP,WAC7C,IAAI,gBAKTC,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACC,QAASC,EAAAA,EAAQE,MAAON,UAAWC,EAAaf,SAAC,4BAKjEsB,QAAQxB,EAAAA,EAAAA,KAACyB,EAAAA,GAAa,CAACC,QAASjB,EAAeP,SAAC,cAChDc,UAAWC,GAGjB,C,uBC9CO,SAASd,EAAmBL,EAAgBC,GACjD,OAAO,IAAI4B,KAAKC,aAAa,GAAI,CAC/BC,MAAO,WACPC,gBAAiB,eACjB/B,SAAAA,IACCgC,OAAOC,OAAOlC,GACnB,C,iFAEO,IAAMmC,EAAsB,SAACC,GAElC,IAE2BC,EAFrBC,EAAI,IAAIC,WAAW,GAIzB,OAF2BF,EAEFD,EAF0BI,OAAOC,aAAaH,EAAID,EAG7E,EAEaK,EAAQ,SAACC,GAAe,OAAoB,IAAIC,SAAQ,SAACC,GACpEC,WAAWD,EAASF,EACtB,GAAG,C","sources":["components/Amount/Amount.tsx","webpack://millionaire/./src/pages/GameOver/GameOver.module.css?77e9","pages/GameOver/GameOver.tsx","utils/index.ts"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport { getFormattedAmount } from '../../utils';\n\ninterface Props {\n  amount: number;\n  currency: string;\n}\n\nfunction Amount({ amount, currency }: Props): ReactElement {\n  return <>{getFormattedAmount(amount, currency)}</>;\n}\n\nexport default Amount;\n","// extracted by mini-css-extract-plugin\nexport default {\"layout\":\"GameOver_layout__JmcA4\",\"score\":\"GameOver_score__ckbZc\",\"title\":\"GameOver_title__n7Iir\",\"result\":\"GameOver_result__zZ7NI\"};","import React, { ReactElement, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { SplitScreenLayout } from '../../layout';\nimport { ButtonPrimary } from '../../components/Button';\nimport Amount from '../../components/Amount';\nimport Typography, { Variant } from '../../components/Typography';\nimport { useStoreSelector } from '../../store';\nimport { prizeSelector } from '../../store/slices/app/quiz';\nimport { ROUTE } from '../../router/config';\nimport styles from './GameOver.module.css';\n\nfunction GameOver(): ReactElement {\n  const navigate = useNavigate();\n  const prize = useStoreSelector(prizeSelector);\n\n  // We can use navigate via Link form react-router-dom instead programmatically navigation\n  // eslint-disable-next-line max-len\n  // We're currently using programmatic navigation so we don't have to create a link component that looks like a button\n  const startGameAgain = useCallback(() => {\n    navigate(ROUTE.QUIZ);\n  }, [navigate]);\n\n  return (\n    <SplitScreenLayout\n      description={\n        prize ? (\n          <div className={styles.result}>\n            <Typography variant={Variant.bodyBold} className={styles.score}>\n              Total score:\n            </Typography>\n            <Typography variant={Variant.title} className={styles.title}>\n              <Amount amount={prize.amount} currency={prize.currency} />\n              {' '}\n              earned\n            </Typography>\n          </div>\n        ) : (\n          <Typography variant={Variant.title} className={styles.title}>\n            Will be lucky next time\n          </Typography>\n        )\n      }\n      button={<ButtonPrimary onClick={startGameAgain}>Try again</ButtonPrimary>}\n      className={styles.layout}\n    />\n  );\n}\n\nexport default GameOver;\n","export function getFormattedAmount(amount: number, currency: string): string {\n  return new Intl.NumberFormat([], {\n    style: 'currency',\n    currencyDisplay: 'narrowSymbol',\n    currency,\n  }).format(Number(amount));\n}\n\nexport const convertIndexToAlpha = (index: number): string => {\n  // ASCII value of first character\n  const A = 'A'.charCodeAt(0);\n\n  const numberToCharacter = (num: number): string => String.fromCharCode(A + num);\n\n  return numberToCharacter(index);\n};\n\nexport const delay = (timeout: number): Promise<void> => new Promise((resolve) => {\n  setTimeout(resolve, timeout);\n});\n"],"names":["_ref","amount","currency","_jsx","_Fragment","children","getFormattedAmount","navigate","useNavigate","prize","useStoreSelector","prizeSelector","startGameAgain","useCallback","ROUTE","QUIZ","SplitScreenLayout","description","_jsxs","className","styles","Typography","variant","Variant","bodyBold","title","Amount","button","ButtonPrimary","onClick","Intl","NumberFormat","style","currencyDisplay","format","Number","convertIndexToAlpha","index","num","A","charCodeAt","String","fromCharCode","delay","timeout","Promise","resolve","setTimeout"],"sourceRoot":""}